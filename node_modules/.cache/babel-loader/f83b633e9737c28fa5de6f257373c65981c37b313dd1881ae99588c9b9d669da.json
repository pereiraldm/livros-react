{"ast":null,"code":"e;\n\n// Importar a classe Livro\n\n// Definir a variável livros, como Array<Livro>, contendo ao menos três elementos, no formato JSON\nconst livros = [{\n  codigo: 1,\n  codEditora: 1,\n  titulo: \"Livro A\",\n  resumo: \"Resumo do Livro A\",\n  autores: [\"Autor A1\", \"Autor A2\"]\n}, {\n  codigo: 2,\n  codEditora: 2,\n  titulo: \"Livro B\",\n  resumo: \"Resumo do Livro B\",\n  autores: [\"Autor B1\", \"Autor B2\"]\n}, {\n  codigo: 3,\n  codEditora: 3,\n  titulo: \"Livro C\",\n  resumo: \"Resumo do Livro C\",\n  autores: [\"Autor C1\", \"Autor C2\"]\n}];\n\n// Criar a classe ControleLivro, contendo os métodos obterLivros, incluir e excluir\nexport class ControleLivros {\n  // Implementar o método obterLivros, com o retorno do vetor livros\n  obterLivros() {\n    return livros;\n  }\n\n  // Implementar o método incluir, recebendo um objeto do tipo Livro, que terá o código trocado pelo código mais alto do vetor, incrementado de um, e depois será adicionado ao vetor\n  incluir(livro) {\n    const novoCodigo = livros[livros.length - 1].codigo + 1;\n    livro.codigo = novoCodigo;\n    livros.push(livro);\n  }\n\n  // Implementar o método excluir, recebendo um código numérico, que irá encontrar o índice do livro com o código fornecido, através de findIndex, e removê-lo com o uso de splice\n  excluir(codigo) {\n    const index = livros.findIndex(l => l.codigo === codigo);\n    if (index !== -1) {\n      livros.splice(index, 1);\n    }\n  }\n}","map":{"version":3,"names":["e","livros","codigo","codEditora","titulo","resumo","autores","ControleLivros","obterLivros","incluir","livro","novoCodigo","length","push","excluir","index","findIndex","l","splice"],"sources":["C:/Users/lucas/OneDrive/Área de Trabalho/Nova pasta/livros-react/src/controle/ControleLivros.ts"],"sourcesContent":["e\r\n\r\n// Importar a classe Livro\r\nimport { Livro } from \"../modelo/Livro\";\r\n\r\n// Definir a variável livros, como Array<Livro>, contendo ao menos três elementos, no formato JSON\r\nconst livros: Array<Livro> = [\r\n{\r\ncodigo: 1,\r\ncodEditora: 1,\r\ntitulo: \"Livro A\",\r\nresumo: \"Resumo do Livro A\",\r\nautores: [\"Autor A1\", \"Autor A2\"],\r\n},\r\n{\r\ncodigo: 2,\r\ncodEditora: 2,\r\ntitulo: \"Livro B\",\r\nresumo: \"Resumo do Livro B\",\r\nautores: [\"Autor B1\", \"Autor B2\"],\r\n},\r\n{\r\ncodigo: 3,\r\ncodEditora: 3,\r\ntitulo: \"Livro C\",\r\nresumo: \"Resumo do Livro C\",\r\nautores: [\"Autor C1\", \"Autor C2\"],\r\n},\r\n];\r\n\r\n// Criar a classe ControleLivro, contendo os métodos obterLivros, incluir e excluir\r\nexport class ControleLivros {\r\n// Implementar o método obterLivros, com o retorno do vetor livros\r\npublic obterLivros(): Array<Livro> {\r\nreturn livros;\r\n}\r\n\r\n// Implementar o método incluir, recebendo um objeto do tipo Livro, que terá o código trocado pelo código mais alto do vetor, incrementado de um, e depois será adicionado ao vetor\r\npublic incluir(livro: Livro): void {\r\nconst novoCodigo = livros[livros.length - 1].codigo + 1;\r\nlivro.codigo = novoCodigo;\r\nlivros.push(livro);\r\n}\r\n\r\n// Implementar o método excluir, recebendo um código numérico, que irá encontrar o índice do livro com o código fornecido, através de findIndex, e removê-lo com o uso de splice\r\npublic excluir(codigo: number): void {\r\nconst index = livros.findIndex((l) => l.codigo === codigo);\r\nif (index !== -1) {\r\nlivros.splice(index, 1);\r\n}\r\n}\r\n}"],"mappings":"AAAAA,CAAC;;AAED;;AAGA;AACA,MAAMC,MAAoB,GAAG,CAC7B;EACAC,MAAM,EAAE,CAAC;EACTC,UAAU,EAAE,CAAC;EACbC,MAAM,EAAE,SAAS;EACjBC,MAAM,EAAE,mBAAmB;EAC3BC,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU;AAChC,CAAC,EACD;EACAJ,MAAM,EAAE,CAAC;EACTC,UAAU,EAAE,CAAC;EACbC,MAAM,EAAE,SAAS;EACjBC,MAAM,EAAE,mBAAmB;EAC3BC,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU;AAChC,CAAC,EACD;EACAJ,MAAM,EAAE,CAAC;EACTC,UAAU,EAAE,CAAC;EACbC,MAAM,EAAE,SAAS;EACjBC,MAAM,EAAE,mBAAmB;EAC3BC,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU;AAChC,CAAC,CACA;;AAED;AACA,OAAO,MAAMC,cAAc,CAAC;EAC5B;EACOC,WAAWA,CAAA,EAAiB;IACnC,OAAOP,MAAM;EACb;;EAEA;EACOQ,OAAOA,CAACC,KAAY,EAAQ;IACnC,MAAMC,UAAU,GAAGV,MAAM,CAACA,MAAM,CAACW,MAAM,GAAG,CAAC,CAAC,CAACV,MAAM,GAAG,CAAC;IACvDQ,KAAK,CAACR,MAAM,GAAGS,UAAU;IACzBV,MAAM,CAACY,IAAI,CAACH,KAAK,CAAC;EAClB;;EAEA;EACOI,OAAOA,CAACZ,MAAc,EAAQ;IACrC,MAAMa,KAAK,GAAGd,MAAM,CAACe,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACf,MAAM,KAAKA,MAAM,CAAC;IAC1D,IAAIa,KAAK,KAAK,CAAC,CAAC,EAAE;MAClBd,MAAM,CAACiB,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;IACvB;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}